#  Opcode	Assembler	ISA	units		Instruction Format				Registers				Semantics

# RVC Compressed Instruction Set, Quadrant 0

   c.addi4spn	Ct,Cc,CK	-	-		"000 {5:4|9:6|2|3} ... 00"			x[4:2]+8,2,-,-				"wrd(r1+imm)"
   c.fld	CD,Cl(Cs)	C,D	fp,mmu		"001 {5:3} ... {7:6} ... 00"			f[4:2]+8,x[9:7]+8,-,-			"wdd(MMU.load_fp64 (r1+imm))"
   c.lw		Ct,Cl(Cs)	C	mmu		"010 {5:3} ... {2|6} ... 00"			x[4:2]+8,x[9:7]+8,-,-			"wrd(MMU.load_int32(r1+imm))"
   c.ld		Ct,Cl(Cs)	C,F	fp,mmu		"011 {5:3} ... {7:6} ... 00"			x[4:2]+8,x[9:7]+8,-,-			"wrd(MMU.load_int64(r1+imm))"
   c.fsd	CD,Cl(Cs)	C,D	fp,mmu		"101 {5:3} ... {7:6} ... 00"			-,x[9:7]+8,f[4:2]+8,-			"MMU_store_fp64 (r1+imm, d2)"
   c.sw		Ct,Cl(Cs)	C	mmu		"110 {5:3} ... {2|6} ... 00"			-,x[9:7]+8,x[4:2]+8,-			"MMU_store_int32(r1+imm, r2)"
   c.sd		Ct,Cl(Cs)	C,F	fp,mmu		"111 {5:3} ... {7:6} ... 00"			-,x[9:7]+8,x[4:2]+8,-			"MMU_store_int64(r1+imm, r2)"

# RVC Compressed Instruction Set, Quadrant 1
"
   c.addi	rd		-	-		"000 {-5} ..... {4:0} 01"			x[11:7],x[11:7],-,-			"wrd(r1 + imm)"
   c.addiw	rd		C	pc		"001 {-5} ..... {4:0} 01"			x[11:7],x[11:7],-,-			"wrd(int32_t(r1) + int32_t(imm))"
   c.li		rd		-	-		"010 {-5} ..... {4:0} 01"			x[11:7],-,-,-				"wrd(imm)"
   c.addi16sp	-		-	-		"011 {-9} 00010 {4|6|8:7|5} 01"			2,2,-,-					"wrd(r1+imm)"
   c.lui	rd		-	-		"011 {-17} ..... {16:12} 01"			x[11:7],-				"wrd(imm)"
   c.srli	rd		-	-		"100 {5} 00 ... {4:0} 01"			x[9:7]+8,x[9:7]+8,-,-			"wrd(uint64_t(r1) >> imm)"
   c.srai	rd		-	-		"100 {5} 01 ... {4:0} 01"			x[9:7]+8,x[9:7]+8,-,-			"wrd( int64_t(r1) >> imm)"
   c.andi	rd		-	-		"100 {-5} 10 ... {4:0} 01"			x[9:7]+8,x[9:7]+8,-,-			"wrd(r1 & imm)"
   c.sub	rd,rs2		-	-		"100 0 11 ... 00 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(r1 - r2)"
   c.xor	rd,rs2		-	-		"100 0 11 ... 01 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(r1 ^ r2)"
   c.or		rd,rs2		-	-		"100 0 11 ... 10 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(r1 | r2)"
   c.and	rd,rs2		-	-		"100 0 11 ... 11 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(r1 & r2)"
   c.subw	rd,rs2		-	-		"100 1 11 ... 00 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(int32_t(r1) - int32_t(r2))"
   c.addw	rd,rs2		-	-		"100 1 11 ... 01 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(int32_t(r1) + int32_t(r2))"
   c.j		-		C	pc		"101 {-11|4|9:8|10|6|7|3:1|5} 01"		-,-,-,-					"wpc(pc+imm); break"
   c.beqz	rs1		C	pc		"110 {-8|4:3} ... {7:6|2:1|5} 01"		-,x[9:7]+8,-,-				"if (r1==0) { wpc(pc+imm); break; }"
   c.bnez	rs1		C	pc		"111 {-8|4:3} ... {7:6|2:1|5} 01"		-,x[9:7]+8,-,-				"if (r1!=0) { wpc(pc+imm); break; }"

# RVC Compressed Instruction Set, Quadrant 1

   c.slli	rd		-	-		"000 {5} ..... {4:0} 10"			x[11:7],x[11:7],-,-			"wrd(uint64_t(r1) << imm)"
   c.fldsp	fd		C,D	fp,mmu		"001 {5} ..... {4:3|8:6} 10"			f[11:7],2,-,-				"wdd(MMU.load_fp64 (r1+imm))"
   c.lwsp	rd		C	mmu		"010 {5} ..... {4:2|7:6} 10"			x[11:7],2,-,-				"wrd(MMU.load_int32(r1+imm))"
   c.ldsp	rd		C,F	fp,mmu		"011 {5} ..... {4:3|8:6} 10"			x[11:7],2,-,-				"wrd(MMU.load_int64(r1+imm))"
   c.jr		rs1		C	pc		"100 0 ..... 00000 10"				-,x[11:7],-,-				"wpc(r1); break"
   c.mv		rd,rs2		-	-		"100 0 ..... ..... 10"				x[11:7],-,x[6:2],-			"wrd(r2)"
   c.ebreak	-		-	-		"100 1 00000 00000 10"				-,-,-,-					"ebreak()"
   c.jalr	rs1		C	pc		"100 1 ..... 00000 10"				1,x[11:7],-,-				"{ long t=pc+2; wpc(r1); wrd(t); break; }"
   c.add	rd,rs2		-	-		"100 1 ..... ..... 10"				x[11:7],x[11:7],x[6:2],-		"wrd(r1 + r2)"
   c.fsdsp	fs2		C,D	fp,mmu		"101 {5:3|8:6} ..... 10"			-,2,f[6:2],-				"MMU_store_fp64 (r1+imm, d2)"
   c.swsp	rs2		C	mmu		"110 {5:2|7:6} ..... 10"			-,2,x[6:2],-				"MMU_store_int32(r1+imm, r2)"
   c.sdsp	rs2		C,F	fp,mmu		"111 {5:3|8:6} ..... 10"			-,2,x[6:2],-				"MMU_store_int64(r1+imm, r2)"

# RV32I Base Instruction Set

   lui		d,u		-	-		"{-31:12} ..... 0110111"			x[11:7],-				"wrd(imm)"
   auipc	d,u		-	-		"{-31:12} ..... 0010111"			x[11:7],-				"wrd(pc + imm)"
   jal		d,a		I	pc		"{-20|10:1|11|19:12} ..... 1101111"		x[11:7],-				"{ long t=pc+4; wpc(pc+imm);	"wrd(t); break; }"
   jalr		d,s		I	pc		"{-11:0} ..... 000 ..... 1100111"		x[11:7],x[19:15],-,-			"{ long t=pc+4; wpc((r1+imm)&~1L); wrd(t); break; }"

   beq		s,t,p		I	pc		"{-12|10:5} ..... ..... 000 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if ( int64_t(r1)== int64_t(r2)) { wpc(pc+imm); break; }"
   bne		s,t,p		I	pc		"{-12|10:5} ..... ..... 001 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if ( int64_t(r1)!= int64_t(r2)) { wpc(pc+imm); break; }"
   blt		s,t,p		I	pc		"{-12|10:5} ..... ..... 100 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if ( int64_t(r1)<  int64_t(r2)) { wpc(pc+imm); break; }"
   bge		s,t,p		I	pc		"{-12|10:5} ..... ..... 101 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if ( int64_t(r1)>= int64_t(r2)) { wpc(pc+imm); break; }"
   bltu		s,t,p		I	pc		"{-12|10:5} ..... ..... 110 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if (uint64_t(r1)< uint64_t(r2)) { wpc(pc+imm); break; }"
   bgeu		s,t,p		I	pc		"{-12|10:5} ..... ..... 111 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if (uint64_t(r1)>=uint64_t(r2)) { wpc(pc+imm); break; }"

   lb		d,o(s)		I	mmu		"{-11:0} ..... 000 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(MMU.load_int8  (r1+imm))"
   lh		d,o(s)		I	mmu		"{-11:0} ..... 001 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(MMU.load_int16 (r1+imm))"
   lw		d,o(s)		I	mmu		"{-11:0} ..... 010 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(MMU.load_int32 (r1+imm))"
   lbu		d,o(s)		I	mmu		"{-11:0} ..... 100 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(MMU.load_uint8 (r1+imm))"
   lhu		d,o(s)		I	mmu		"{-11:0} ..... 101 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(MMU.load_uint16(r1+imm))"
   sb		t,q(s)		I	mmu		"{-11:5} ..... ..... 000 {4:0} 0100011"		-,x[19:15],x[24:20],-			"MMU_store_int8 (r1+imm, r2)"
   sh		t,q(s)		I	mmu		"{-11:5} ..... ..... 001 {4:0} 0100011"		-,x[19:15],x[24:20],-			"MMU_store_int16(r1+imm, r2)"
   sw		t,q(s)		I	mmu		"{-11:5} ..... ..... 010 {4:0} 0100011"		-,x[19:15],x[24:20],-			"MMU_store_int32(r1+imm, r2)"

   addi		d,s,j		-	-		"{-11:0} ..... 000 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(r1 + imm)"
   slti		d,s,j		-	-		"{-11:0} ..... 010 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd( int64_t(r1) <  int64_t(imm))"
   sltiu	d,s,j		-	-		"{-11:0} ..... 011 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(uint64_t(r1) < uint64_t(imm))"
   xori		d,s,j		-	-		"{-11:0} ..... 100 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(r1 ^ imm)"
   ori		d,s,j		-	-		"{-11:0} ..... 110 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(r1 | imm)"
   andi		d,s,j		-	-		"{-11:0} ..... 111 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(r1 & imm)"
   slli		d,s,>		-	-		"000000 {5:0} ..... 001 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(uint64_t(r1) << imm)"
   srli		d,s,>		-	-		"000000 {5:0} ..... 101 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(uint64_t(r1) >> imm)"
   srai		d,s,>		-	-		"010000 {5:0} ..... 101 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd( int64_t(r1) >> imm)"

   add		d,s,t		-	-		"0000000 ..... ..... 000 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 + r2)"
   sub		d,s,t		-	-		"0100000 ..... ..... 000 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 - r2)"
   sll		d,s,t		-	-		"0000000 ..... ..... 001 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(uint64_t(r1) << uint64_t(r2))"
   slt		d,s,t		-	-		"0000000 ..... ..... 010 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd( int64_t(r1) <   int64_t(r2))"
   sltu		d,s,t		-	-		"0000000 ..... ..... 011 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(uint64_t(r1) <  uint64_t(r2))"
   xor		d,s,t		-	-		"0000000 ..... ..... 100 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 ^ r2)"
   srl		d,s,t		-	-		"0000000 ..... ..... 101 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(uint64_t(r1) >> uint64_t(r2))"
   sra		d,s,t		-	-		"0100000 ..... ..... 101 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd( int64_t(r1) >>  int64_t(r2))"
   or		d,s,t		-	-		"0000000 ..... ..... 110 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 | r2)"
   and		d,s,t		-	-		"0000000 ..... ..... 111 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 & r2)"

   fence	rd,rs1		-	-		"{11:8} {7:4} {3:0} ..... 000 ..... 0001111"	x[11:7],x[19:15],-,-			"fence(0)"
   fence.i	rd,rs1		I	mmu		"{-11:0} ..... 001 ..... 0001111"		x[11:7],x[19:15],-,-			"fence(1)"
   ecall	-		-	-		"000000000000 00000 000 00000 1110011"		-,-,-,-					"ecall()"
   ebreak	-		-	-		"000000000001 00000 000 00000 1110011"		-,-,-,-					"ebreak()"

   csrrw	d,E,s		-	-		"{11:0} ..... 001 ..... 1110011"		x[11:7],x[19:15],-,-			"wrd(csrrw(imm, r1))"
   csrrs	d,E,s		-	-		"{11:0} ..... 010 ..... 1110011"		x[11:7],x[19:15],-,-			"wrd(csrrs(imm, r1))"
   csrrc	d,E,s		-	-		"{11:0} ..... 011 ..... 1110011"		x[11:7],x[19:15],-,-			"wrd(csrrc(imm, r1))"
   csrrwi	d,E,Z		-	-		"{11:0} {16:12} 101 ..... 1110011"		x[11:7],-				"wrd(csrrwi(imm))"
   csrrsi	d,E,Z		-	-		"{11:0} {16:12} 110 ..... 1110011"		x[11:7],-				"wrd(csrrsi(imm))"
   csrrci	d,E,Z		-	-		"{11:0} {16:12} 111 ..... 1110011"		x[11:7],-				"wrd(csrrci(imm))"

# RV64I Base Instruction Set (in addition to RV32I)

   lwu		d,o(s)		I	mmu		"{-11:0} ..... 110 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(MMU.load_uint32(r1+imm))"
   ld		d,o(s)		I	mmu		"{-11:0} ..... 011 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(MMU.load_int64 (r1+imm))"
   sd		t,q(s)		I	mmu		"{-11:5} ..... ..... 011 {4:0} 0100011"		-,x[19:15],x[24:20],-			"MMU_store_int64(r1+imm, r2)"

   addiw	d,s,j		-	-		"{-11:0} ..... 000 ..... 0011011"		x[11:7],x[19:15],-,-			"wrd( int32_t(r1) +  int32_t(imm))"
   slliw	d,s,<		-	-		"0000000 {4:0} ..... 001 ..... 0011011"		x[11:7],x[19:15],-,-			"wrd(uint32_t(r1) << imm)"
   srliw	d,s,<		-	-		"0000000 {4:0} ..... 101 ..... 0011011"		x[11:7],x[19:15],-,-			"wrd(uint32_t(r1) >> imm)"
   sraiw	d,s,<		-	-		"0100000 {4:0} ..... 101 ..... 0011011"		x[11:7],x[19:15],-,-			"wrd( int32_t(r1) >> imm)"

   addw		d,s,t		-	-		"0000000 ..... ..... 000 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd( int32_t(r1) +   int32_t(r2))"
   subw		d,s,t		-	-		"0100000 ..... ..... 000 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd( int32_t(r1) -   int32_t(r2))"
   sllw		d,s,t		-	-		"0000000 ..... ..... 001 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(uint32_t(r1) << uint32_t(r2))"
   srlw		d,s,t		-	-		"0000000 ..... ..... 101 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(uint32_t(r1) >> uint32_t(r2))"
   sraw		d,s,t		-	-		"0100000 ..... ..... 101 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd( int32_t(r1) >>  int32_t(r2))"

# RV32M Standard Extension

   mul		d,s,t		-	-		"0000001 ..... ..... 000 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(xmul   (r1, r2))"
   mulh		d,s,t		-	-		"0000001 ..... ..... 001 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(xmulh  (r1, r2))"
   mulhsu	d,s,t		-	-		"0000001 ..... ..... 010 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(xmulhsu(r1, r2))"
   mulhu	d,s,t		-	-		"0000001 ..... ..... 011 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(xmulhu (r1, r2))"
   div		d,s,t		-	-		"0000001 ..... ..... 100 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(xdiv (r1, r2))"
   divu		d,s,t		-	-		"0000001 ..... ..... 101 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(xdivu(r1, r2))"
   rem		d,s,t		-	-		"0000001 ..... ..... 110 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(xrem (r1, r2))"
   remu		d,s,t		-	-		"0000001 ..... ..... 111 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(xremu(r1, r2))"

# RV64M Standard Extension (in addition to RV32M)

   mulw		d,s,t		-	-		"0000001 ..... ..... 000 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(xmulw (r1, r2))"
   divw		d,s,t		-	-		"0000001 ..... ..... 100 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(xdivw (r1, r2))"
   divuw	d,s,t		-	-		"0000001 ..... ..... 101 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(xdivwu(r1, r2))"
   remw		d,s,t		-	-		"0000001 ..... ..... 110 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(xremw (r1, r2))"
   remuw	d,s,t		-	-		"0000001 ..... ..... 111 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(xremwu(r1, r2))"

# RV32A Standard Extension

   lr.w		d,0(s)		A	mmu,lrsc	"00010 {1:0} 00000 ..... 010 ..... 0101111"	x[11:7],x[19:15],-,-			"wrd(lr_w(r1))"
   sc.w		d,t,0(s)	A	mmu,lrsc	"00011 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sc_w(r1, r2))"
   amoswap.w	d,t,0(s)	A	mmu,amo		"00001 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amoswap_w(r1, r2))"
   amoadd.w	d,t,0(s)	A	mmu,amo		"00000 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amoadd_w (r1, r2))"
   amoxor.w	d,t,0(s)	A	mmu,amo		"00100 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amoxor_w (r1, r2))"
   amoand.w	d,t,0(s)	A	mmu,amo		"01100 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amoand_w (r1, r2))"
   amoor.w	d,t,0(s)	A	mmu,amo		"01000 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amoor_w  (r1, r2))"
   amomin.w	d,t,0(s)	A	mmu,amo		"10000 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amomin_w (r1, r2))"
   amomax.w	d,t,0(s)	A	mmu,amo		"10100 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amomax_w (r1, r2))"
   amominu.w	d,t,0(s)	A	mmu,amo		"11000 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amominu_w(r1, r2))"
   amomaxu.w	d,t,0(s)	A	mmu,amo		"11100 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amomaxu_w(r1, r2))"

   lr.d		d,0(s)		A	mmu,lrsc	"00010 {1:0} 00000 ..... 011 ..... 0101111"	x[11:7],x[19:15],-,-"
   sc.d		d,t,0(s)	A	mmu,lrsc	"00011 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(lr_d(r1))"
   amoswap.d	d,t,0(s)	A	mmu,amo		"00001 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sc_d(r1, r2))"
   amoadd.d	d,t,0(s)	A	mmu,amo		"00000 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amoswap_d(r1, r2))"
   amoxor.d	d,t,0(s)	A	mmu,amo		"00100 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amoadd_d (r1, r2))"
   amoand.d	d,t,0(s)	A	mmu,amo		"01100 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amoxor_d (r1, r2))"
   amoor.d	d,t,0(s)	A	mmu,amo		"01000 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amoand_d (r1, r2))"
   amomin.d	d,t,0(s)	A	mmu,amo		"10000 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amoor_d  (r1, r2))"
   amomax.d	d,t,0(s)	A	mmu,amo		"10100 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amomin_d (r1, r2))"
   amominu.d	d,t,0(s)	A	mmu,amo		"11000 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amomax_d (r1, r2))"
   amomaxu.d	d,t,0(s)	A	mmu,amo		"11100 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(amominu_d(r1, r2))"
																		"wrd(amomaxu_d(r1, r2))"

# RV32F Standard Extension
   flw		d,o(s)		F	fp,mmu		"{-11:0} ..... 010 ..... 0000111"		x[11:7],x[19:15],-,-			"wfd(MMU.load_fp32 (r1+imm))"
   fsw		t,q(s)		F	fp,mmu		"{-11:5} ..... ..... 010 {4:0} 0100111"		-,x[19:15],x[24:20],-			"MMU_store_fp32(r1+imm, f2)"

   fmadd.s	D,S,T,R,m	F	fp		"..... 00 ..... ..... {2:0} ..... 1000011"	f[11:7],f[19:15],f[24:20],f[31:27]	"wfd(fmadd_s (f1, f2, f3, imm))"
   fmsub.s	D,S,T,R,m	F	fp		"..... 00 ..... ..... {2:0} ..... 1000111"	f[11:7],f[19:15],f[24:20],f[31:27]	"wfd(fmsub_s (f1, f2, f3, imm))"
   fnmsub.s	D,S,T,R,m	F	fp		"..... 00 ..... ..... {2:0} ..... 1001011"	f[11:7],f[19:15],f[24:20],f[31:27]	"wfd(fnmsub_s(f1, f2, f3, imm))"
   fnmadd.s	D,S,T,R,m	F	fp		"..... 00 ..... ..... {2:0} ..... 1001111"	f[11:7],f[19:15],f[24:20],f[31:27]	"wfd(fnmadd_s(f1, f2, f3, imm))"

   fadd.s	D,S,T,m		F	fp		"0000000 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"wfd(fadd_s(f1, f2, imm))"
   fsub.s	D,S,T,m		F	fp		"0000100 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"wfd(fsub_s(f1, f2, imm))"
   fmul.s	D,S,T,m		F	fp		"0001000 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"wfd(fmul_s(f1, f2, imm))"
   fdiv.s	D,S,T,m		F	fp		"0001100 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"wfd(fdiv_s(f1, f2, imm))"
   fsqrt.s	D,S,m		F	fp		"0101100 00000 ..... {2:0} ..... 1010011"	f[11:7],f[19:15],-,-			"wfd(fsqrt_s(f1, imm))"

   fsgnj.s	D,S,T		F	fp		"0010000 ..... ..... 000 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"wfd(fsgnj_s (f1, f2))"
   fsgnjn.s	D,S,T		F	fp		"0010000 ..... ..... 001 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"wfd(fsgnjn_s(f1, f2))"
   fsgnjx.s	D,S,T		F	fp		"0010000 ..... ..... 010 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"wfd(fsgnjx_s(f1, f2))"
   fmin.s	D,S,T		F	fp		"0010100 ..... ..... 000 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"wfd(fmin_s(f1, f2))"
   fmax.s	D,S,T		F	fp		"0010100 ..... ..... 001 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"wfd(fmax_s(f1, f2))"

   fcvt.w.s	d,S,m		F	fp		"1100000 00000 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"wrd(fcvt_w_s (f1, imm))"
   fcvt.wu.s	d,S,m		F	fp		"1100000 00001 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"wrd(fcvt_wu_s(f1, imm))"
   fmv.x.w	d,S		F	fp		"1110000 00000 ..... 000 ..... 1010011"		x[11:7],f[19:15],-,-			"wrd(fmv_x_w(f1))"

   feq.s	d,S,T		F	fp		"1010000 ..... ..... 010 ..... 1010011"		x[11:7],f[19:15],x[24:20],-		"wrd(feq_s(f1, f2))"
   flt.s	d,S,T		F	fp		"1010000 ..... ..... 001 ..... 1010011"		x[11:7],f[19:15],x[24:20],-		"wrd(flt_s(f1, f2))"
   fle.s	d,S,T		F	fp		"1010000 ..... ..... 000 ..... 1010011"		x[11:7],f[19:15],x[24:20],-		"wrd(fle_s(f1, f2))"
   fclass.s	d,S		F	fp		"1110000 00000 ..... 001 ..... 1010011"		x[11:7],f[19:15],-,-			"wrd(fclass_s(f1))"

   fcvt.s.w	D,s,m		F	fp		"1101000 00000 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"wfd(fcvt_s_w (r1, imm))"
   fcvt.s.wu	D,s,m		F	fp		"1101000 00001 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"wfd(fcvt_s_wu(r1, imm))"
   fmv.w.x	D,s		F	fp		"1111000 00000 ..... 000 ..... 1010011"		f[11:7],x[19:15],-,-			"wfd(fmv_w_x(r1))"

# RV64F Standard Extension (in addition to RV32F)

   fcvt.l.s	d,S,m		F	fp		"1100000 00010 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"wrd(fcvt_l_s (f1, imm))"
   fcvt.lu.s	d,S,m		F	fp		"1100000 00011 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"wrd(fcvt_lu_s(f1, imm))"
   fcvt.s.l	D,s,m		F	fp		"1101000 00010 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"wfd(fcvt_s_l (r1, imm))"
   fcvt.s.lu	D,s,m		F	fp		"1101000 00011 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"wfd(fcvt_s_lu(r1, imm))"

# RV32D Standard Extension

   fld		d,o(s)		D	fp,mmu		"{-11:0} ..... 011 ..... 0000111"		x[11:7],x[19:15],-,-			"wdd(MMU.load_fp32 (r1+imm))"
   fsd		t,q(s)		D	fp,mmu		"{-11:5} ..... ..... 011 {4:0} 0100111"		-,x[19:15],x[24:20],-			"MMU_store_fp32(r1+imm, d2)"

   fmadd.d	D,S,T,R,m	D	fp		"..... 01 ..... ..... {2:0} ..... 1000011"	f[11:7],f[19:15],f[24:20],f[31:27]	"wdd(fmadd_d (d1, d2, d3, imm))"
   fmsub.d	D,S,T,R,m	D	fp		"..... 01 ..... ..... {2:0} ..... 1000111"	f[11:7],f[19:15],f[24:20],f[31:27]	"wdd(fmsub_d (d1, d2, d3, imm))"
   fnmsub.d	D,S,T,R,m	D	fp		"..... 01 ..... ..... {2:0} ..... 1001011"	f[11:7],f[19:15],f[24:20],f[31:27]	"wdd(fnmsub_d(d1, d2, d3, imm))"
   fnmadd.d	D,S,T,R,m	D	fp		"..... 01 ..... ..... {2:0} ..... 1001111"	f[11:7],f[19:15],f[24:20],f[31:27]	"wdd(fnmadd_d(d1, d2, d3, imm))"

   fadd.d	D,S,T,m		D	fp		"0000001 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"wdd(fadd_d(d1, d2, imm))"
   fsub.d	D,S,T,m		D	fp		"0000101 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"wdd(fsub_d(d1, d2, imm))"
   fmul.d	D,S,T,m		D	fp		"0001001 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"wdd(fmul_d(d1, d2, imm))"
   fdiv.d	D,S,T,m		D	fp		"0001101 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"wdd(fdiv_d(d1, d2, imm))"
   fsqrt.d	D,S,m		D	fp		"0101101 00000 ..... {2:0} ..... 1010011"	f[11:7],f[19:15],-,-			"wdd(fsqrt_d(d1, imm))"

   fsgnj.d	D,S,T		D	fp		"0010001 ..... ..... 000 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"wdd(fsgnj_d (d1, d2))"
   fsgnjn.d	D,S,T		D	fp		"0010001 ..... ..... 001 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"wdd(fsgnjn_d(d1, d2))"
   fsgnjx.d	D,S,T		D	fp		"0010001 ..... ..... 010 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"wdd(fsgnjx_d(d1, d2))"
   fmin.d	D,S,T		D	fp		"0010101 ..... ..... 000 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"wdd(fmin_d(d1, d2))"
   fmax.d	D,S,T		D	fp		"0010101 ..... ..... 001 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"wdd(fmax_d(d1, d2))"

   fcvt.s.d	D,S,m		D	fp		"0100000 00001 ..... {2:0} ..... 1010011"	f[11:7],f[19:15],-,-			"wdd(fcvt_s_d(f1, imm))"
   fcvt.d.s	D,S,m		D	fp		"0100001 00000 ..... {2:0} ..... 1010011"	f[11:7],f[19:15],-,-			"wfd(fcvt_d_s(d1, imm))"

   feq.d	d,S,T		D	fp		"1010001 ..... ..... 010 ..... 1010011"		x[11:7],f[19:15],x[24:20],-		"wrd(feq_d(d1, d2))"
   flt.d	d,S,T		D	fp		"1010001 ..... ..... 001 ..... 1010011"		x[11:7],f[19:15],x[24:20],-		"wrd(flt_d(d1, d2))"
   fle.d	d,S,T		D	fp		"1010001 ..... ..... 000 ..... 1010011"		x[11:7],f[19:15],x[24:20],-		"wrd(fle_d(d1, d2))"
   fclass.d	d,S		D	fp		"1110001 00000 ..... 001 ..... 1010011"		x[11:7],f[19:15],-,-			"wrd(fclass_d(d1))"

   fcvt.w.d	d,S,m		D	fp		"1100001 00000 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"wrd(fcvt_w_d (d1, imm))"
   fcvt.wu.d	d,S,m		D	fp		"1100001 00001 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"wrd(fcvt_wu_d(d1, imm))"
   fcvt.d.w	D,s,m		D	fp		"1101001 00000 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"wdd(fcvt_d_w (r1, imm))"
   fcvt.d.wu	D,s,m		D	fp		"1101001 00001 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"wdd(fcvt_d_wu(r1, imm))"

# RV64D Standard Extension (in addition to RV32D)

   fcvt.l.d	d,S,m		D	fp		"1100001 00010 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"wrd(fcvt_l_d (d1, imm))"
   fcvt.lu.d	d,S,m		D	fp		"1100001 00011 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"wrd(fcvt_lu_d(d1, imm))"
   fmv.x.d	d,S		D	fp		"1110001 00000 ..... 000 ..... 1010011"		x[11:7],f[19:15],-,-			"wdd(fmv_w_x(r1))"
   fcvt.d.l	D,s,m		D	fp		"1101001 00010 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"wdd(fcvt_d_l (r1, imm))"
   fcvt.d.lu	D,s,m		D	fp		"1101001 00011 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"wdd(fcvt_d_lu(r1, imm))"
   fmv.d.x	D,s		D	fp		"1111001 00000 ..... 000 ..... 1010011"		f[11:7],x[19:15],-,-			"wrd(fmv_x_w(d1))"
