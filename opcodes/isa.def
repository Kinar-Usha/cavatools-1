#  Opcode	Assembler	ISA	units		Instruction Format				Registers				Semantics

# RVC Compressed Instruction Set, Quadrant 0

   c.addi4spn	Ct,Cc,CK	-	-		"000 {5:4|9:6|2|3} ... 00"			x[4:2]+8,2,-,-				"wrd(r1+imm)"
   c.fld	CD,Cl(Cs)	C,D	ld,fp		"001 {5:3} ... {7:6} ... 00"			f[4:2]+8,x[9:7]+8,-,-			"wfd(f64(LOAD(uint64_t, r1+imm)))"
   c.lw		Ct,Cl(Cs)	C	ld		"010 {5:3} ... {2|6} ... 00"			x[4:2]+8,x[9:7]+8,-,-			"wrd(    LOAD( int32_t, r1+imm))"
   c.ld		Ct,Cl(Cs)	C	ld		"011 {5:3} ... {7:6} ... 00"			x[4:2]+8,x[9:7]+8,-,-			"wrd(    LOAD( int64_t, r1+imm))"
   c.fsd	CD,Cl(Cs)	C,D	st,fp		"101 {5:3} ... {7:6} ... 00"			-,x[9:7]+8,f[4:2]+8,-			"STORE(uint64_t, r1+imm, f2.v[0])"
   c.sw		Ct,Cl(Cs)	C	st		"110 {5:3} ... {2|6} ... 00"			-,x[9:7]+8,x[4:2]+8,-			"STORE(int32_t,  r1+imm, r2)"
   c.sd		Ct,Cl(Cs)	C	st		"111 {5:3} ... {7:6} ... 00"			-,x[9:7]+8,x[4:2]+8,-			"STORE(int64_t,  r1+imm, r2)"

# RVC Compressed Instruction Set, Quadrant 1
"
   c.addi	rd		C	-		"000 {-5} ..... {4:0} 01"			x[11:7],x[11:7],-,-			"wrd(r1 + imm)"
   c.addiw	rd		C	-		"001 {-5} ..... {4:0} 01"			x[11:7],x[11:7],-,-			"wrd(int32_t(r1) + int32_t(imm))"
   c.li		rd		C	-		"010 {-5} ..... {4:0} 01"			x[11:7],-,-,-				"wrd(imm)"
   c.addi16sp	-		C	-		"011 {-9} 00010 {4|6|8:7|5} 01"			2,2,-,-					"wrd(r1+imm)"
   c.lui	rd		C	-		"011 {-17} ..... {16:12} 01"			x[11:7],-				"wrd(imm)"
   c.srli	rd		C	-		"100 {5} 00 ... {4:0} 01"			x[9:7]+8,x[9:7]+8,-,-			"wrd(uint64_t(r1) >> imm)"
   c.srai	rd		C	-		"100 {5} 01 ... {4:0} 01"			x[9:7]+8,x[9:7]+8,-,-			"wrd( int64_t(r1) >> imm)"
   c.andi	rd		C	-		"100 {-5} 10 ... {4:0} 01"			x[9:7]+8,x[9:7]+8,-,-			"wrd(r1 & imm)"
   c.sub	rd,rs2		C	-		"100 0 11 ... 00 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(r1 - r2)"
   c.xor	rd,rs2		C	-		"100 0 11 ... 01 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(r1 ^ r2)"
   c.or		rd,rs2		C	-		"100 0 11 ... 10 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(r1 | r2)"
   c.and	rd,rs2		C	-		"100 0 11 ... 11 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(r1 & r2)"
   c.subw	rd,rs2		C	-		"100 1 11 ... 00 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(int32_t(r1) - int32_t(r2))"
   c.addw	rd,rs2		C	-		"100 1 11 ... 01 ... 01"			x[9:7]+8,x[9:7]+8,x[4:2]+8,-		"wrd(int32_t(r1) + int32_t(r2))"
   c.j		-		C	uj		"101 {-11|4|9:8|10|6|7|3:1|5} 01"		-,-,-,-					"wpc(pc+imm); stop"
   c.beqz	rs1		C	cj		"110 {-8|4:3} ... {7:6|2:1|5} 01"		-,x[9:7]+8,-,-				"if (r1==0) { wpc(pc+imm); stop; }"
   c.bnez	rs1		C	cj		"111 {-8|4:3} ... {7:6|2:1|5} 01"		-,x[9:7]+8,-,-				"if (r1!=0) { wpc(pc+imm); stop; }"

# RVC Compressed Instruction Set, Quadrant 1

   c.slli	rd		C	-		"000 {5} ..... {4:0} 10"			x[11:7],x[11:7],-,-			"wrd(uint64_t(r1) << imm)"
   c.fldsp	fd		C,D	ld,fp		"001 {5} ..... {4:3|8:6} 10"			f[11:7],2,-,-				"wfd(f64(LOAD(uint64_t, r1+imm)))"
   c.lwsp	rd		C	ld		"010 {5} ..... {4:2|7:6} 10"			x[11:7],2,-,-				"wrd(LOAD(int32_t, r1+imm))"
   c.ldsp	rd		C	ld		"011 {5} ..... {4:3|8:6} 10"			x[11:7],2,-,-				"wrd(LOAD(int64_t, r1+imm))"
   c.ret	rs1		C	uj		"100 0 00001 00000 10"				-,1,-,-					"wpc(r1); stop"
   c.jr		rs1		C	uj		"100 0 ..... 00000 10"				-,x[11:7],-,-				"wpc(r1); stop"
   c.mv		rd,rs2		C	-		"100 0 ..... ..... 10"				x[11:7],-,x[6:2],-			"wrd(r2)"
   c.ebreak	-		C	ex		"100 1 00000 00000 10"				-,-,-,-					"ebreak()"
   c.jalr	rs1		C	uj		"100 1 ..... 00000 10"				1,x[11:7],-,-				"{ long t=pc+2; wpc(r1); wrd(t); stop; }"
   c.add	rd,rs2		C	-		"100 1 ..... ..... 10"				x[11:7],x[11:7],x[6:2],-		"wrd(r1 + r2)"
   c.fsdsp	fs2		C,D	st,fp		"101 {5:3|8:6} ..... 10"			-,2,f[6:2],-				"STORE(uint64_t, r1+imm, f2.v[0])"
   c.swsp	rs2		C	st		"110 {5:2|7:6} ..... 10"			-,2,x[6:2],-				"STORE( int32_t, r1+imm, r2)"
   c.sdsp	rs2		C	st		"111 {5:3|8:6} ..... 10"			-,2,x[6:2],-				"STORE( int64_t, r1+imm, r2)"

# RV32I Base Instruction Set

   lui		d,u		I	-		"{-31:12} ..... 0110111"			x[11:7],-				"wrd(imm)"
   auipc	d,u		I	-		"{-31:12} ..... 0010111"			x[11:7],-				"wrd(pc + imm)"
   jal		d,a		I	uj		"{-20|10:1|11|19:12} ..... 1101111"		x[11:7],-				"{ long t=pc+4; wpc(pc+imm);	   wrd(t); stop; }"
   ret		d,s		I	uj		"{-11:0} ..... 000 00000 1100111"		-,x[19:15],-,-				"{              wpc((r1+imm)&~1L);         stop; }"
   jalr		d,s		I	uj		"{-11:0} ..... 000 ..... 1100111"		x[11:7],x[19:15],-,-			"{ long t=pc+4; wpc((r1+imm)&~1L); wrd(t); stop; }"

   beq		s,t,p		I	cj		"{-12|10:5} ..... ..... 000 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if ( int64_t(r1)== int64_t(r2)) { wpc(pc+imm); stop; }"
   bne		s,t,p		I	cj		"{-12|10:5} ..... ..... 001 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if ( int64_t(r1)!= int64_t(r2)) { wpc(pc+imm); stop; }"
   blt		s,t,p		I	cj		"{-12|10:5} ..... ..... 100 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if ( int64_t(r1)<  int64_t(r2)) { wpc(pc+imm); stop; }"
   bge		s,t,p		I	cj		"{-12|10:5} ..... ..... 101 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if ( int64_t(r1)>= int64_t(r2)) { wpc(pc+imm); stop; }"
   bltu		s,t,p		I	cj		"{-12|10:5} ..... ..... 110 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if (uint64_t(r1)< uint64_t(r2)) { wpc(pc+imm); stop; }"
   bgeu		s,t,p		I	cj		"{-12|10:5}  ..... ..... 111 {4:1|11} 1100011"	-,x[19:15],x[24:20],-			"if (uint64_t(r1)>=uint64_t(r2)) { wpc(pc+imm); stop; }"

   lb		d,o(s)		I	ld		"{-11:0} ..... 000 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(LOAD( int8_t,  r1+imm))"p
   lh		d,o(s)		I	ld		"{-11:0} ..... 001 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(LOAD( int16_t, r1+imm))"
   lw		d,o(s)		I	ld		"{-11:0} ..... 010 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(LOAD( int32_t, r1+imm))"
   lbu		d,o(s)		I	ld		"{-11:0} ..... 100 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(LOAD(uint8_t,  r1+imm))"
   lhu		d,o(s)		I	ld		"{-11:0} ..... 101 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(LOAD(uint16_t, r1+imm))"
   sb		t,q(s)		I	st		"{-11:5} ..... ..... 000 {4:0} 0100011"		-,x[19:15],x[24:20],-			"STORE(int8_t,  r1+imm, r2)"
   sh		t,q(s)		I	st		"{-11:5} ..... ..... 001 {4:0} 0100011"		-,x[19:15],x[24:20],-			"STORE(int16_t, r1+imm, r2)"
   sw		t,q(s)		I	st		"{-11:5}     ..... ..... 010   {4:0} 0100011"	-,x[19:15],x[24:20],-			"STORE(int32_t, r1+imm, r2)"

   addi		d,s,j		I	-		"{-11:0} ..... 000 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(r1 + imm)"
   slti		d,s,j		I	-		"{-11:0} ..... 010 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd( int64_t(r1) <  int64_t(imm))"
   sltiu	d,s,j		I	-		"{-11:0} ..... 011 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(uint64_t(r1) < uint64_t(imm))"
   xori		d,s,j		I	-		"{-11:0} ..... 100 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(uint64_t(r1) ^ uint64_t(imm))"
   ori		d,s,j		I	-		"{-11:0} ..... 110 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(uint64_t(r1) | uint64_t(imm))"
   andi		d,s,j		I	-		"{-11:0} ..... 111 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(uint64_t(r1) & uint64_t(imm))"
   slli		d,s,>		I	-		"000000 {5:0} ..... 001 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(uint64_t(r1) << imm)"
   srli		d,s,>		I	-		"000000 {5:0} ..... 101 ..... 0010011"		x[11:7],x[19:15],-,-			"wrd(uint64_t(r1) >> imm)"
   srai		d,s,>		I	-		"01000 0     {5:0} ..... 101   ..... 0010011"		x[11:7],x[19:15],-,-		"wrd( int64_t(r1) >> imm)"

   add		d,s,t		I	-		"0000000 ..... ..... 000 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 + r2)"
   sub		d,s,t		I	-		"0100000 ..... ..... 000 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 - r2)"
   sll		d,s,t		I	-		"0000000 ..... ..... 001 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(uint64_t(r1) << uint64_t(r2))"
   slt		d,s,t		I	-		"0000000 ..... ..... 010 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd( int64_t(r1) <   int64_t(r2))"
   sltu		d,s,t		I	-		"0000000 ..... ..... 011 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(uint64_t(r1) <  uint64_t(r2))"
   xor		d,s,t		I	-		"0000000 ..... ..... 100 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 ^ r2)"
   srl		d,s,t		I	-		"0000000 ..... ..... 101 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(uint64_t(r1) >> uint64_t(r2))"
   sra		d,s,t		I	-		"0100000 ..... ..... 101 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd( int64_t(r1) >>  int64_t(r2))"
   or		d,s,t		I	-		"0000000 ..... ..... 110 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 | r2)"
   and		d,s,t		I	-		"0000000 ..... ..... 111 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 & r2)"

   fence	rd,rs1		I	ex		"{11:8} {7:4} {3:0} ..... 000 ..... 0001111"	x[11:7],x[19:15],-,-			"fence(0)"
   fence.i	rd,rs1		I	ex		"{-11:0} ..... 001 ..... 0001111"		x[11:7],x[19:15],-,-			"fence(1)"
   ecall	-		I	ex		"000000000000 00000 000 00000 1110011"		-,-,-,-					"proxy_ecall(); wpc(pc+4); stop"
   ebreak	-		I	ex		"000000000001 00000 000 00000 1110011"		-,-,-,-					"ebreak()"

   csrrw	d,E,s		I	sr		"{11:0}            ..... 001   ..... 1110011"		x[11:7],x[19:15],-,-			"wrd(csr_func(imm,       [&](uint64_t old) { return        r1;              } ))"
   csrrs	d,E,s		I	sr		"{11:0} ..... 010 ..... 1110011"		x[11:7],x[19:15],-,-			"wrd(csr_func(imm,       [&](uint64_t old) { return old |  r1;              } ))"
   csrrc	d,E,s		I	sr		"{11:0} ..... 011 ..... 1110011"		x[11:7],x[19:15],-,-			"wrd(csr_func(imm,       [&](uint64_t old) { return old & ~r1;              } ))"
   csrrwi	d,E,Z		I	sr		"{11:0} {16:12} 101 ..... 1110011"		x[11:7],-				"wrd(csr_func(imm&0xFFF, [&](uint64_t old) { return              (imm>>12); } ))"
   csrrsi	d,E,Z		I	sr		"{11:0} {16:12} 110 ..... 1110011"		x[11:7],-				"wrd(csr_func(imm&0xFFF, [&](uint64_t old) { return old |        (imm>>12); } ))"
   csrrci	d,E,Z		I	sr		"{11:0} {16:12} 111 ..... 1110011"		x[11:7],-				"wrd(csr_func(imm&0xFFF, [&](uint64_t old) { return old & ~(uint64_t)(imm>>12); } ))"

# RV64I Base Instruction Set (in addition to RV32I)

   lwu		d,o(s)		I	ld		"{-11:0} ..... 110 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(LOAD(uint32_t, r1+imm))"
   ld		d,o(s)		I	ld		"{-11:0} ..... 011 ..... 0000011"		x[11:7],x[19:15],-,-			"wrd(LOAD(int64_t,  r1+imm))"
   sd		t,q(s)		I	st		"{-11:5} ..... ..... 011 {4:0} 0100011"		-,x[19:15],x[24:20],-			"STORE(int64_t, r1+imm, r2)"

   addiw	d,s,j		I	-		"{-11:0} ..... 000 ..... 0011011"		x[11:7],x[19:15],-,-			"wrd( int32_t(r1) +  int32_t(imm))"
   slliw	d,s,<		I	-		"0000000 {4:0} ..... 001 ..... 0011011"		x[11:7],x[19:15],-,-			"wrd(uint32_t(r1) << imm)"
   srliw	d,s,<		I	-		"0000000 {4:0} ..... 101 ..... 0011011"		x[11:7],x[19:15],-,-			"wrd(uint32_t(r1) >> imm)"
   sraiw	d,s,<		I	-		"0100000 {4:0} ..... 101 ..... 0011011"		x[11:7],x[19:15],-,-			"wrd( int32_t(r1) >> imm)"

   addw		d,s,t		I	-		"0000000 ..... ..... 000 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd( int32_t(r1) +   int32_t(r2))"
   subw		d,s,t		I	-		"0100000 ..... ..... 000 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd( int32_t(r1) -   int32_t(r2))"
   sllw		d,s,t		I	-		"0000000 ..... ..... 001 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(uint32_t(r1) << uint32_t(r2))"
   srlw		d,s,t		I	-		"0000000 ..... ..... 101 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(uint32_t(r1) >> uint32_t(r2))"
   sraw		d,s,t		I	-		"0100000 ..... ..... 101 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd( int32_t(r1) >>  int32_t(r2))"

# RV32M Standard Extension

   mul		d,s,t		M	-		"0000001 ..... ..... 000 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r1 * r2)"
   mulh		d,s,t		M	-		"0000001 ..... ..... 001 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(mulh  (r1, r2))"
   mulhsu	d,s,t		M	-		"0000001 ..... ..... 010 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(mulhsu(r1, r2))"
   mulhu	d,s,t		M	-		"0000001 ..... ..... 011 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(mulhu (r1, r2))"
   div		d,s,t		M	-		"0000001 ..... ..... 100 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r2==0 ?  INT64_MAX : (r1==INT64_MIN && r2==-1) ? r1 : r1/r2)"
   divu		d,s,t		M	-		"0000001 ..... ..... 101 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r2==0 ? UINT64_MAX : (uint64_t)r1/(uint64_t)r2             )"
   rem		d,s,t		M	-		"0000001 ..... ..... 110 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r2==0 ?  INT64_MAX : (r1==INT64_MIN && r2==-1) ? r1 : r1%r2)"
   remu		d,s,t		M	-		"0000001 ..... ..... 111 ..... 0110011"		x[11:7],x[19:15],x[24:20],-		"wrd(r2==0 ? UINT64_MAX : (uint64_t)r1%(uint64_t)r2             )"

# RV64M Standard Extension (in addition to RV32M)

   mulw		d,s,t		M	-		"0000001 ..... ..... 000 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd((int32_t)r1 * (int32_t)r2)"
   divw		d,s,t		M	-		"0000001 ..... ..... 100 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(r2==0 ? UINT64_MAX : ( int32_t)r1/( int32_t)r2)"
   divuw	d,s,t		M	-		"0000001 ..... ..... 101 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(r2==0 ? UINT64_MAX : (uint32_t)r1/(uint32_t)r2)"
   remw		d,s,t		M	-		"0000001 ..... ..... 110 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(r2==0 ? UINT64_MAX : ( int32_t)r1%( int32_t)r2)"
   remuw	d,s,t		M	-		"0000001 ..... ..... 111 ..... 0111011"		x[11:7],x[19:15],x[24:20],-		"wrd(r2==0 ? UINT64_MAX : (uint32_t)r1%(uint32_t)r2)"

# RV32A Standard Extension

   lr.w		d,0(s)		A	ld,lrsc		"00010 {1:0} 00000 ..... 010 ..... 0101111"	x[11:7],x[19:15],-,-			"{ int32_t rv=LOAD(int32_t, r1);                                  acquire_reservation(r1); wrd( rv); }"
   sc.w		d,t,0(s)	A	st,lrsc		"00011 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"{ bool ok=check_reservation(r1, 4); if (ok) STORE(uint32_t, r1, r2); yield_reservation(); wrd(!ok); }"
   amoswap.w	d,t,0(s)	A	amo		"00001 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sext32(amo_uint32(r1, [&](uint32_t lhs) { return       r2; } )))"
   amoadd.w	d,t,0(s)	A	amo		"00000 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sext32(amo_uint32(r1, [&]( int32_t lhs) { return lhs + r2; } )))"
   amoxor.w	d,t,0(s)	A	amo		"00100 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sext32(amo_uint32(r1, [&](uint32_t lhs) { return lhs ^ r2; } )))"
   amoand.w	d,t,0(s)	A	amo		"01100 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sext32(amo_uint32(r1, [&](uint32_t lhs) { return lhs & r2; } )))"
   amoor.w	d,t,0(s)	A	amo		"01000 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sext32(amo_uint32(r1, [&](uint32_t lhs) { return lhs | r2; } )))"
   amomin.w	d,t,0(s)	A	amo		"10000 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sext32(amo_uint32(r1, [&]( int32_t lhs) { return std::min(lhs,  int32_t(r2)); } )))"
   amomax.w	d,t,0(s)	A	amo		"10100 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sext32(amo_uint32(r1, [&]( int32_t lhs) { return std::max(lhs,  int32_t(r2)); } )))"
   amominu.w	d,t,0(s)	A	amo		"11000 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sext32(amo_uint32(r1, [&](uint32_t lhs) { return std::min(lhs, uint32_t(r2)); } )))"
   amomaxu.w	d,t,0(s)	A	amo		"11100 {1:0} ..... ..... 010 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(sext32(amo_uint32(r1, [&](uint32_t lhs) { return std::max(lhs, uint32_t(r2)); } )))"


   lr.d		d,0(s)		A	ld,lrsc		"00010 {1:0} 00000 ..... 011 ..... 0101111"	x[11:7],x[19:15],-,-			"{ int64_t rv=LOAD(int64_t, r1);                                  acquire_reservation(r1); wrd( rv); }"
   sc.d		d,t,0(s)	A	st,lrsc		"00011 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"{ bool ok=check_reservation(r1, 4); if (ok) STORE(uint64_t, r1, r2); yield_reservation(); wrd(!ok); }"
   amoswap.d	d,t,0(s)	A	amo		"00001 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(      (amo_uint64(r1, [&](uint64_t lhs) { return       r2; } )))"
   amoadd.d	d,t,0(s)	A	amo		"00000 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(      (amo_uint64(r1, [&]( int64_t lhs) { return lhs + r2; } )))"
   amoxor.d	d,t,0(s)	A	amo		"00100 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(      (amo_uint64(r1, [&](uint64_t lhs) { return lhs ^ r2; } )))"
   amoand.d	d,t,0(s)	A	amo		"01100 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(      (amo_uint64(r1, [&](uint64_t lhs) { return lhs & r2; } )))"
   amoor.d	d,t,0(s)	A	amo		"01000 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(      (amo_uint64(r1, [&](uint64_t lhs) { return lhs | r2; } )))"
   amomin.d	d,t,0(s)	A	amo		"10000 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(      (amo_uint64(r1, [&]( int64_t lhs) { return std::min(lhs,  int64_t(r2)); } )))"
   amomax.d	d,t,0(s)	A	amo		"10100 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(      (amo_uint64(r1, [&]( int64_t lhs) { return std::max(lhs,  int64_t(r2)); } )))"
   amominu.d	d,t,0(s)	A	amo		"11000 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(      (amo_uint64(r1, [&](uint64_t lhs) { return std::min(lhs, uint64_t(r2)); } )))"
   amomaxu.d	d,t,0(s)	A	amo		"11100 {1:0} ..... ..... 011 ..... 0101111"	x[11:7],x[19:15],x[24:20],-		"wrd(      (amo_uint64(r1, [&](uint32_t lhs) { return std::max(lhs, uint32_t(r2)); } )))"

# RV32F Standard Extension

   flw		D,o(s)		F	ld,fp		"{-11:0} ..... 010 ..... 0000111"		f[11:7],x[19:15],-,-			"wfd(f32(LOAD(uint32_t, r1+imm)))"
   fsw		T,q(s)		F	st,fp		"{-11:5} ..... ..... 010 {4:0} 0100111"		-,x[19:15],f[24:20],-			"STORE(uint32_t, r1+imm, f2.v[0])"

   fmadd.s	D,S,T,R,m	F	fp		"..... 00 ..... ..... {2:0} ..... 1000011"	f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f32_mulAdd(f32(f1),                 f32(f2),     f32(f3)            )); sfx"
   fmsub.s	D,S,T,R,m	F	fp		"..... 00 ..... ..... {2:0} ..... 1000111"	f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f32_mulAdd(f32(f1),                 f32(f2), f32(f32(f3).v^F32_SIGN))); sfx"
   fnmsub.s	D,S,T,R,m	F	fp		"..... 00 ..... ..... {2:0} ..... 1001011"	f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f32_mulAdd(f32(f32(f1).v^F32_SIGN), f32(f2),     f32(f3)            )); sfx"
   fnmadd.s	D,S,T,R,m	F	fp		"..... 00 ..... ..... {2:0} ..... 1001111"	f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f32_mulAdd(f32(f32(f1).v^F32_SIGN), f32(f2), f32(f32(f3).v^F32_SIGN))); sfx"

   fadd.s	D,S,T,m		F	fp		"0000000 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"srm; wfd(f32_add(f32(f1), f32(f2))); sfx"
   fsub.s	D,S,T,m		F	fp		"0000100 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"srm; wfd(f32_sub(f32(f1), f32(f2))); sfx"
   fmul.s	D,S,T,m		F	fp		"0001000 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"srm; wfd(f32_mul(f32(f1), f32(f2))); sfx"
   fdiv.s	D,S,T,m		F	fp		"0001100 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"srm; wfd(f32_div(f32(f1), f32(f2))); sfx"
   fsqrt.s	D,S,m		F	fp		"0101100 00000 ..... {2:0} ..... 1010011"	f[11:7],f[19:15],-,-			"srm; wfd(f32_sqrt(f32(f1)));         sfx"

   fsgnj.s	D,S,T		F	fp		"0010000 ..... ..... 000 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"     wfd(fsgnj_s(f32(f1), f32(f2), false, false))"
   fsgnjn.s	D,S,T		F	fp		"0010000 ..... ..... 001 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"     wfd(fsgnj_s(f32(f1), f32(f2), true,  false))"
   fsgnjx.s	D,S,T		F	fp		"0010000 ..... ..... 010 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"     wfd(fsgnj_s(f32(f1), f32(f2), false,  true))"
   fmin.s	D,S,T		F	fp		"0010100 ..... ..... 000 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"     wfd(fmin_s(f32(f1), f32(f2)))"
   fmax.s	D,S,T		F	fp		"0010100 ..... ..... 001 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"     wfd(fmax_s(f32(f1), f32(f2)))"

   fcvt.w.s	d,S,m		F	fp		"1100000 00000 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"srm; wrd(sext32(f32_to_i32( f32(f1), RM, true))); sfx"
   fcvt.wu.s	d,S,m		F	fp		"1100000 00001 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"srm; wrd(sext32(f32_to_ui32(f32(f1), RM, true))); sfx"
   fmv.x.w	d,S		F	fp		"1110000 00000 ..... 000 ..... 1010011"		x[11:7],f[19:15],-,-			"     wrd(sext32(f1.v[0]))"

   feq.s	d,S,T		F	fp		"1010000 ..... ..... 010 ..... 1010011"		x[11:7],f[19:15],f[24:20],-		"     wrd(f32_eq(f32(f1), f32(f2)))"
   flt.s	d,S,T		F	fp		"1010000 ..... ..... 001 ..... 1010011"		x[11:7],f[19:15],f[24:20],-		"     wrd(f32_lt(f32(f1), f32(f2)))"
   fle.s	d,S,T		F	fp		"1010000 ..... ..... 000 ..... 1010011"		x[11:7],f[19:15],f[24:20],-		"     wrd(f32_lt(f32(f1), f32(f2)))"
   fclass.s	d,S		F	fp		"1110000 00000 ..... 001 ..... 1010011"		x[11:7],f[19:15],-,-			"     wrd(f32_classify(f32(f1)))"

   fcvt.s.w	D,s,m		F	fp		"1101000 00000 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"srm; wfd(i32_to_f32( ( int32_t)r1));              sfx"
   fcvt.s.wu	D,s,m		F	fp		"1101000 00001 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"srm; wfd(ui32_to_f32((uint32_t)r1));              sfx"
   fmv.w.x	D,s		F	fp		"1111000 00000 ..... 000 ..... 1010011"		f[11:7],x[19:15],-,-			"     wfd(f32(r1))"

# RV64F Standard Extension (in addition to RV32F)

   fcvt.l.s	d,S,m		F	fp		"11000 00 00010 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"srm; wrd(sext32(f32_to_i64( f32(f1), RM, true))); sfx"
   fcvt.lu.s	d,S,m		F	fp		"1100000 00011 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"srm; wrd(sext32(f32_to_ui64(f32(f1), RM, true))); sfx"
   fcvt.s.l	D,s,m		F	fp		"1101000 00010 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"srm; wfd(i64_to_f32( ( int32_t)r1));              sfx"
   fcvt.s.lu	D,s,m		F	fp		"1101000 00011 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"srm; wfd(ui64_to_f32((uint32_t)r1));              sfx"

# RV32D Standard Extension

   fld		D,o(s)		D	ld,fp		"{-11:0} ..... 011 ..... 0000111"		f[11:7],x[19:15],-,-			"wfd(f64(LOAD(uint64_t, r1+imm)))"
   fsd		T,q(s)		D	st,fp		"{-11:5} ..... ..... 011 {4:0} 0100111"		-,x[19:15],f[24:20],-			"STORE(uint64_t, r1+imm, f2.v[0])"

   fmadd.d	D,S,T,R,m	D	fp		"..... 01    ..... ..... {2:0} ..... 1000011"	f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f64_mulAdd(f64(f1),                 f64(f2),     f64(f3)            )); sfx"
   fmsub.d	D,S,T,R,m	D	fp		"..... 01 ..... ..... {2:0} ..... 1000111"	f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f64_mulAdd(f64(f1),                 f64(f2), f64(f64(f3).v^F64_SIGN))); sfx"
   fnmsub.d	D,S,T,R,m	D	fp		"..... 01 ..... ..... {2:0} ..... 1001011"	f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f64_mulAdd(f64(f64(f1).v^F64_SIGN), f64(f2),     f64(f3)            )); sfx"
   fnmadd.d	D,S,T,R,m	D	fp		"..... 01 ..... ..... {2:0} ..... 1001111"	f[11:7],f[19:15],f[24:20],f[31:27]	"srm; wfd(f64_mulAdd(f64(f64(f1).v^F64_SIGN), f64(f2), f64(f64(f3).v^F64_SIGN))); sfx"

   fadd.d	D,S,T,m		D	fp		"0000001 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"srm; wfd(f64_add(f64(f1), f64(f2))); sfx"
   fsub.d	D,S,T,m		D	fp		"0000101 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"srm; wfd(f64_sub(f64(f1), f64(f2))); sfx"
   fmul.d	D,S,T,m		D	fp		"0001001 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"srm; wfd(f64_mul(f64(f1), f64(f2))); sfx"
   fdiv.d	D,S,T,m		D	fp		"0001101 ..... ..... {2:0} ..... 1010011"	f[11:7],f[19:15],f[24:20],-		"srm; wfd(f64_div(f64(f1), f64(f2))); sfx"
   fsqrt.d	D,S,m		D	fp		"0101101 00000 ..... {2:0} ..... 1010011"	f[11:7],f[19:15],-,-			"srm; wfd(f64_sqrt(f64(f1)));         sfx"

   fsgnj.d	D,S,T		D	fp		"0010001 ..... ..... 000 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"     wfd(fsgnj64(f1, f2, false, false))"
   fsgnjn.d	D,S,T		D	fp		"0010001 ..... ..... 001 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"     wfd(fsgnj64(f1, f2, true,  false))"
   fsgnjx.d	D,S,T		D	fp		"0010001 ..... ..... 010 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"     wfd(fsgnj64(f1, f2, false,  true))"
   fmin.d	D,S,T		D	fp		"0010101 ..... ..... 000 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"     wfd(fmin_d(f64(f1), f64(f2)))"
   fmax.d	D,S,T		D	fp		"0010101 ..... ..... 001 ..... 1010011"		f[11:7],f[19:15],f[24:20],-		"     wfd(fmax_d(f64(f1), f64(f2)))"

   fcvt.s.d	D,S,m		D	fp		"0100000 00001 ..... {2:0} ..... 1010011"	f[11:7],f[19:15],-,-			"srm; wfd(f64_to_f32(f64(f1)));                   sfx"
   fcvt.d.s	D,S,m		D	fp		"0100001 00000 ..... {2:0} ..... 1010011"	f[11:7],f[19:15],-,-			"srm; wfd(f32_to_f64(f32(f1)));                   sfx"

   feq.d	d,S,T		D	fp		"1010001 ..... ..... 010 ..... 1010011"		x[11:7],f[19:15],f[24:20],-		"     wrd(f64_eq(f64(f1), f64(f2)))"
   flt.d	d,S,T		D	fp		"1010001 ..... ..... 001 ..... 1010011"		x[11:7],f[19:15],f[24:20],-		"     wrd(f64_lt(f64(f1), f64(f2)))"
   fle.d	d,S,T		D	fp		"1010001 ..... ..... 000 ..... 1010011"		x[11:7],f[19:15],f[24:20],-		"     wrd(f64_lt(f64(f1), f64(f2)))"
   fclass.d	d,S		D	fp		"1110001 00000 ..... 001 ..... 1010011"		x[11:7],f[19:15],-,-			"     wrd(f64_classify(f64(f1)))"

   fcvt.w.d	d,S,m		D	fp		"1100001 00000 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"srm; wrd(sext32(f64_to_i32( f64(f1), RM, true))); sfx"
   fcvt.wu.d	d,S,m		D	fp		"1100001 00001 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"srm; wrd(sext32(f64_to_ui32(f64(f1), RM, true))); sfx"
   fcvt.d.w	D,s,m		D	fp		"1101001 00000 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"srm; wfd(i32_to_f64( ( int32_t)r1));              sfx"
   fcvt.d.wu	D,s,m		D	fp		"1101001 00001 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"srm; wfd(ui32_to_f64((uint32_t)r1));              sfx"

# RV64D Standard Extension (in addition to RV32D)

   fcvt.l.d	d,S,m		D	fp		"1100001 00010 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"wrd(sext32(f64_to_i64( f64(f1), RM, true))); sfx"
   fcvt.lu.d	d,S,m		D	fp		"1100001 00011 ..... {2:0} ..... 1010011"	x[11:7],f[19:15],-,-			"wrd(sext32(f64_to_ui64(f64(f1), RM, true))); sfx"
   fmv.x.d	d,S		D	fp		"1110001 00000 ..... 000 ..... 1010011"		x[11:7],f[19:15],-,-			"wrd(f1.v[0])"
   fcvt.d.l	D,s,m		D	fp		"1101001 00010 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"wfd(i64_to_f64( ( int64_t)r1));              sfx"
   fcvt.d.lu	D,s,m		D	fp		"1101001 00011 ..... {2:0} ..... 1010011"	f[11:7],x[19:15],-,-			"wfd(ui64_to_f64((uint64_t)r1));              sfx"
   fmv.d.x	D,s		D	fp		"1111001 00000 ..... 000 ..... 1010011"		f[11:7],x[19:15],-,-			"wfd(f64(r1))"

# Custom Instructions

+  lvb		d,o(s)		I	ld,vec		"{-11:0}       ..... 000 ..... 1011011"		x[11:7],x[19:15],-,-			"wrd(LOAD( int8_t,  r1+imm))"
+  lvh		d,o(s)		I	ld,vec		"{-11:0}       ..... 001 ..... 1011011"		x[11:7],x[19:15],-,-			"wrd(LOAD( int16_t, r1+imm))"
+  lvw		d,o(s)		I	ld,vec		"{-11:0}       ..... 010 ..... 1011011"		x[11:7],x[19:15],-,-			"wrd(LOAD( int32_t, r1+imm))"
+  lvbu		d,o(s)		I	ld,vec		"{-11:0}       ..... 100 ..... 1011011"		x[11:7],x[19:15],-,-			"wrd(LOAD(uint8_t,  r1+imm))"
+  lvhu		d,o(s)		I	ld,vec		"{-11:0}       ..... 101 ..... 1011011"		x[11:7],x[19:15],-,-			"wrd(LOAD(uint16_t, r1+imm))"

+  lvwu		d,o(s)		I	ld,vec		"{-11:0}       ..... 110 ..... 1011011"		x[11:7],x[19:15],-,-			"wrd(LOAD(uint32_t, r1+imm))"
+  lvd		d,o(s)		I	ld,vec		"{-11:0}       ..... 011 ..... 1011011"		x[11:7],x[19:15],-,-			"wrd(LOAD( int64_t, r1+imm))"

+  flvw		D,o(s)		F	ld,fp,vec	"{-11:0}       ..... 010 ..... 1111011"		f[11:7],x[19:15],-,-			"wfd(f32(LOAD(uint32_t, r1+imm)))"
+  fsvw		T,q(s)		F	st,fp,vec	"{-11:5} ..... ..... 110 {4:0} 1111011"		-,x[19:15],f[24:20],-			"STORE(uint32_t, r1+imm, f2.v[0])"

+  flvd		D,o(s)		D	ld,fp,vec	"{-11:0}       ..... 011 ..... 1111011"		f[11:7],x[19:15],-,-			"wfd(f64(LOAD(uint64_t, r1+imm)))"
+  fsvd		T,q(s)		D	st,fp,vec	"{-11:5} ..... ..... 111 {4:0} 1111011"		-,x[19:15],f[24:20],-			"STORE(uint64_t, r1+imm, f2.v[0])"

