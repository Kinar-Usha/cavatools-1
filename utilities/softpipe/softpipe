#!/usr/bin/python3
#
#  Copyright (c) 2020 Peter Hsu.  All Rights Reserved.  See LICENCE file for details.
#
#  Algorithm from https://apps.dtic.mil/dtic/tr/fulltext/u2/a163195.pdf
#    Peter Yan-Tek Hsu, "Highly Concurrent Scalar Processing,"
#    PhD Dissertation, University of Illinois at Urbana-Champaign, 1986
#
#  Usage:  softpipe < loop.def > prog.h
#
#  See vnv_spmv.def, vnv_spmv.h and ComputeSPVM.cpp for example usage
#

import sys
import re

body = 0
if len(sys.argv) > 1 and sys.argv[1] == '-b':
    body = 1

SpecPattern = re.compile(r'^\s*([0-9]+)\s+(.*)')
IterPattern = re.compile(r'^\?iter=(\w+)')
LimitPattern = re.compile(r'^\?limit=(\w+)')
CmdPattern = re.compile(r'^\?([a-z]+)=([a-zA-Z_][a-zA-Z_0-9]*)')

lines = []
for l in sys.stdin:
    lines.insert(0, l.rstrip('\r\n'))

def error(msg):
    sys.stderr.write('Error: ' + msg + '\n')
    exit(1)

BeginPipe = re.compile(r'^\$\{\s+([a-z_A-Z][a-z_A-Z0-9]*)')
DeclPattern = re.compile(r'^\$(.+)([a-zA-Z_][a-zA-Z_0-9]*)\$')

while lines:
    line = lines.pop()
    m = BeginPipe.match(line)
    if not m:
        print(line)
        continue
    template = []
    N = 0
    temps = []
    vl, = m.groups()
    line = lines.pop()
    while line != '$}':
        m = DeclPattern.match(line)
        if m:
            declaration,variable = m.groups()
            temps.append( (variable, declaration) )
            line = lines.pop()
            continue
        m = SpecPattern.match(line)
        if m:
            stage,statement = m.groups()
            stage = int(stage)
            while N < stage+1:
                template.append([])
                N += 1
            template[stage].append(statement.lstrip().rstrip())
            line = lines.pop()
            continue
        if line != None and line[0] != '#':
            error(line)
        
# Create pipeline with vector temporaries (rotated registers)
    if N == 0:
        error('Zero depth software pipeline')
    pipe = []
    for k in range(N):
        pipe.append( {} )
    for k in range(N):
        for i in list(range(k, N)) + list(range(0, k)):
            j = (i + k) % N
            for action in template[i]:
                action = action.replace('$', str(k))
                at = str(k)
                if j < i:
                    at += str(-N)
                action = action.replace('@', at)
                if k not in pipe[j]:
                    pipe[j][k] = []
                pipe[j][k].append(action)

# Generate declarations for vector tempoararies
    for var, decl in temps:
        comma = ', '
        vector = []
        for k in range(N):
            vector.append(var+str(k))
        print('  register {:s}{:s};'.format(decl, comma.join(vector)))
        
# Generate Prolog
    blank = ' '
    print('  { /* Prolog */')
    for k in range(N-1):
        print('    asm volatile("{:d}: # Prolog stage {:d}"); {{'.format(k, k))
        for i in range(k+1):
            if i in pipe[k]:
                print('      if ({:s} > {:d}) {{ {:s} }}'.format(vl, i, blank.join(pipe[k][i])))
        print('    }')
    print('  }')
        
# Generate Body with no branches, followed by epilog
    def GenPipe(branch):
        j = 0
        for k in [N-1] + list(range(N-1)):
            print('    asm volatile("{:d}: # Body/epilog stage {:d}"); {{'.format(k, k))
            for i in range(N):
                g = i;
                if i < j:
                    g += N
                if i in pipe[k]:
                    if branch == 0:
                        print('      {{ {:s} }}'.format(blank.join(pipe[k][i])))
                    elif g < branch:
                        print('      if ({:s} > {:d}) {{ {:s} }}'.format(vl, g, blank.join(pipe[k][i])))
            print('    }')
            j += 1

    if body:
        print('  /* Body */')
        print('  for (; {:s}>{:d}; {:s}-={:d}) {{'.format(vl, N, vl, N))
        GenPipe(0)
        print('  }')
        print('  { /* Epilog */')
        GenPipe(N)
        print('  }')
    else:
        print('  /* Body/Epilog */')
        print('  for (; {:s}>0; {:s}-={:d}) {{'.format(vl, vl, N))
        GenPipe(1000)
        print('  }')
    
            

    

